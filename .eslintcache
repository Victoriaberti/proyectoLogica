[{"D:\\proyectoLogica\\src\\index.js":"1","D:\\proyectoLogica\\src\\Game.js":"2","D:\\proyectoLogica\\src\\PengineClient.js":"3","D:\\proyectoLogica\\src\\Board.js":"4","D:\\proyectoLogica\\src\\Pista.js":"5","D:\\proyectoLogica\\src\\Square.js":"6"},{"size":177,"mtime":1619441402000,"results":"7","hashOfConfig":"8"},{"size":6331,"mtime":1626299470778,"results":"9","hashOfConfig":"8"},{"size":2201,"mtime":1619441402000,"results":"10","hashOfConfig":"8"},{"size":2077,"mtime":1626299498810,"results":"11","hashOfConfig":"8"},{"size":591,"mtime":1622839593592,"results":"12","hashOfConfig":"8"},{"size":463,"mtime":1626301407243,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"q26dmn",{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\proyectoLogica\\src\\index.js",[],["28","29"],"D:\\proyectoLogica\\src\\Game.js",["30","31"],"import React from 'react';\nimport PengineClient from './PengineClient';\nimport Board from './Board';\n\nclass Game extends React.Component {\n\n  pengine;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: null,\n      grillaResuelta : null,\n      pistasEnFilas: null,\n      pistasEnColumnas: null,\n      listaFilas: [],\n      listaColumnas: [],\n      waiting: false,\n      estadoDelJuego: 'Juego en curso', // Si el juego se ganó o está en pausa se utiliza para deshabilitar los botones\n      seleccion : '#', // si el valor es '#' está pintando, si es 'X' está desmarcando, si es 'S' mostrando solución y si es 'P' mostrará pista\n      mostrandoSolucion :  false,\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.handlePengineCreate = this.handlePengineCreate.bind(this);\n    this.pengine = new PengineClient(this.handlePengineCreate);\n  }\n\n  handlePengineCreate() {\n    const queryS = 'init(PistasFilas, PistasColumnas, Grilla)';\n    this.pengine.query(queryS, (success, response) => {\n      if (success) {\n        this.setState({\n          grid: response['Grilla'],\n          pistasEnFilas: response['PistasFilas'],\n          pistasEnColumnas: response['PistasColumnas'],\n          listaFilas: [].constructor(response['PistasFilas'].length),\n          listaColumnas: [].constructor(response['PistasColumnas'].length),\n        });\n        const querySS = 'resolverGrilla('+JSON.stringify(this.state.pistasEnFilas)+','\n          +JSON.stringify(this.state.pistasEnColumnas)+','\n          +JSON.stringify(this.state.grid).replaceAll('\"_\"', \"_\")+','\n          +'GrillaResueltaAux,'\n          +(this.state.listaFilas.length-1)+','\n          +(this.state.listaColumnas.length-1)+')';\n        this.pengine.query(querySS, (success, response) => {\n        if(success){\n          this.setState({\n            grillaResuelta: response['GrillaResueltaAux'],\n          })\n        }\n      })\n      }\n    });\n  }\n\n  handleClick(i, j) {\n    // No action on click if we are waiting.\n    const selActual = this.state.seleccion;\n    if (this.state.waiting || selActual === 'S') {\n      return;\n    }\n    if(selActual === 'P' && this.state.grid[i][j] !== \"_\") {\n      return;\n    }\n    let marca = selActual === \"P\" ? '\"'+this.state.grillaResuelta[i][j]+'\"' : '\"'+selActual+'\"';\n    // Build Prolog query to make the move, which will look as follows:\n    // put(\"#\",[0,1],[], [],[[\"X\",_,_,_,_],[\"X\",_,\"X\",_,_],[\"X\",_,_,_,_],[\"#\",\"#\",\"#\",_,_],[_,_,\"#\",\"#\",\"#\"]], GrillaRes, FilaSat, ColSat)\n    const squaresS = JSON.stringify(this.state.grid).replaceAll('\"_\"', \"_\"); // Remove quotes for variables.\n    const queryS = 'put('\n      + marca \n      + ',[' + i + ',' + j + '],' \n      + JSON.stringify(this.state.pistasEnFilas) + ',' \n      + JSON.stringify(this.state.pistasEnColumnas) + ',' \n      + squaresS\n      + ',GrillaRes,FilaSat,ColSat)';\n    this.setState({\n      waiting: true\n    });\n    this.pengine.query(queryS, (success, response) => {\n      if (success) {\n        this.state.listaFilas[i] = response['FilaSat']; \n        this.state.listaColumnas[j] = response['ColSat'];\n        this.setState({\n          grid: response['GrillaRes'],\n          listaFilas: this.state.listaFilas,\n          listaColumnas: this.state.listaColumnas,\n          waiting: false\n        });\n        //si todas las pistas de las filas y todas las pistas de las columnas cumplen la condicion el juego fue ganado\n        if(this.state.listaFilas.every(this.cumpleCondicion) && \n        this.state.listaColumnas.every(this.cumpleCondicion)){\n          this.juegoGanado();\n        }\n      } \n      else {\n        this.setState({\n          waiting: false\n        });\n      }\n    });\n  }\n\n  cumpleCondicion(valor) {\n    return valor === true;\n  }\n\n  handleClickOption(valor) {\n    if(valor === 'S') {\n      this.setState({\n        waiting : true,\n        mostrandoSolucion : true,\n        estadoDelJuego : 'Juego en pausa'\n      })\n    }\n    else {\n      this.setState({\n        mostrandoSolucion : false,\n        waiting : false,\n        estadoDelJuego: 'Juego en curso'\n      })\n    }\n    this.setState({seleccion : valor})\n  }\n\n  juegoGanado() {\n    this.setState({estadoDelJuego: 'Juego ganado!'});\n  }\n\n  render() {\n    if (this.state.grid === null) {\n      return null;\n    }\n    const marcado = this.state.seleccion;\n    const pintar = marcado === '#' ? 'optionPaint' : 'optionPaint deshabilitado';\n    const marcar = marcado === 'X' ? 'optionMark' : 'optionMark deshabilitado';\n    const pista = marcado === 'P' ? 'opcionPista' : 'opcionPista deshabilitado';\n    const solucion = marcado === 'S' ? 'opcionSolucion' : 'opcionSolucion deshabilitado';\n    var estadoBotones = this.state.estadoDelJuego === 'Juego ganado!';\n    return (\n        <div className = \"game\">\n          <div className = \"tituloJuego\">\n            {'NONOGRAMA'}\n            <div className = 'botonesAyuda'>\n              <button className = {pista} disabled = {estadoBotones} onClick = {() => this.handleClickOption('P')}>\n                {'Pista'}\n              </button>\n              <button className = {solucion} disabled = {estadoBotones} onClick = {() => this.handleClickOption('S')}>\n                {'Solucion'}\n              </button>\n            </div>\n          </div>\n          <Board\n            grid = {this.state.grid}\n            grillaResuelta = {this.state.grillaResuelta}\n            pistasEnFilas = {this.state.pistasEnFilas} \n            pistasEnColumnas = {this.state.pistasEnColumnas} \n            listaFilas = {this.state.listaFilas}\n            listaColumnas = {this.state.listaColumnas}\n            estadoDelJuego = {this.state.estadoDelJuego}\n            onClickBoard = {(i, j) => this.handleClick(i,j)}\n          />\n          <div className = \"opciones\">\n            <div className = \"gameInfo\">\n              {this.state.estadoDelJuego}\n            </div>\n            <div className = \"botones\">\n              <button className = {pintar} disabled = {estadoBotones} onClick = {() => this.handleClickOption('#') }>\n                {' '}\n              </button>\n              <button className = {marcar} disabled = {estadoBotones} onClick = {() => this.handleClickOption('X')}>\n                {'X'}\n              </button>\n            </div>\n          </div>\n        </div>    \n    );\n  }\n}\n\nexport default Game;\n","D:\\proyectoLogica\\src\\PengineClient.js",[],"D:\\proyectoLogica\\src\\Board.js",[],"D:\\proyectoLogica\\src\\Pista.js",[],"D:\\proyectoLogica\\src\\Square.js",[],{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","severity":1,"message":"37","line":81,"column":9,"nodeType":"38","endLine":81,"endColumn":30},{"ruleId":"36","severity":1,"message":"37","line":82,"column":9,"nodeType":"38","endLine":82,"endColumn":33},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","no-global-assign","no-unsafe-negation"]